# Original: https://github.com/guysoft/OctoPi-Klipper-CustomPiOS/blob/6a88c12f562be4668e26fe89a445e761be1481ac/LICENSE
# License: GPL-3.0
name: build images

on:
  push:
    branches:
    - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [ orangepi5, lepotato, raspberrypi64, asus-tinkerboard, banana-pi-m5-m2p, odroidc4, orangepi4-lts, raspberrypi32, rockpi4 ]
        include:
          - name: orangepi5
            base_arch: arm64
            variant: orangepi5
            url: https://redirect.armbian.com/orangepi5/Jammy_legacy
            magic_path: "repository/src/image-armbian/orangepi5.img.xz"
          - name: lepotato
            base_arch: arm64
            variant: armbian
            url: https://redirect.armbian.com/lepotato/Jammy_current
            magic_path: "repository/src/image-armbian/le-potato.img.xz"
          - name: raspberrypi64
            base_arch: arm64
            variant: default
            url: https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2023-02-22/2023-02-21-raspios-bullseye-arm64-lite.img.xz
            magic_path: "repository/src/image/2023-02-21-raspios-bullseye-arm64-lite.img.xz"
          - name: asus-tinkerboard
            base_arch: ""
            variant: armbian
            url: https://redirect.armbian.com/tinkerboard/Jammy_current
            magic_path: "repository/src/image-armbian/asus-tinkerboard.img.xz"
          - name: banana-pi-m5-m2p
            base_arch: arm64
            variant: armbian
            url: https://redirect.armbian.com/bananapim5/Bullseye_current
            magic_path: "repository/src/image-armbian/banana-pi-m5-m2p.img.xz"
          - name: odroidc4
            base_arch: arm64
            variant: armbian
            url: https://redirect.armbian.com/odroidc4/Bullseye_current
            magic_path: "repository/src/image-armbian/odroidc4.img.xz"
          - name: orangepi4-lts
            base_arch: arm64
            variant: armbian
            url: https://redirect.armbian.com/orangepi4-lts/Bullseye_current
            magic_path: "repository/src/image-armbian/orangepi4-lts.img.xz"
          - name: raspberrypi32
            variant: default
            base_arch: ""
            url: https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2023-02-22/2023-02-21-raspios-bullseye-armhf-lite.img.xz
            magic_path: "repository/src/image/2023-02-21-raspios-bullseye-armhf-lite.img.xz"
          - name: rockpi4
            variant: armbian
            base_arch: arm64
            url: https://redirect.armbian.com/rockpi-4c/Bullseye_current
            magic_path: "repository/src/image-armbian/rockpi4.img.xz"

    env:
      IMG_NAME: ${{ matrix.name }}
      BASE_ARCH: ${{ matrix.base_arch }}
      VARIANT: ${{ matrix.variant }}
      IMAGE_URL: ${{ matrix.url }}
      MAGIC_PATH: ${{ matrix.magic_path }}
    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install coreutils p7zip-full qemu-user-static

    - name: Checkout CustomPiOS
      uses: actions/checkout@v2
      with:
        repository: 'guysoft/CustomPiOS'
        path: CustomPiOS

    - name: Checkout Project Repository
      uses: actions/checkout@v2
      with:
        path: repository

    - name: Checkout adsb-pipsetup
      uses: actions/checkout@v2
      with:
        repository: 'dirkhh/adsb-pi-setup'
        path: repository/src/modules/adsb-pi-setup/filesystem/root/usr/local/share/adsb-pi-setup

    - name: Download image
      run: |
        MAGIC_DIR=$(dirname "${MAGIC_PATH}")
        mkdir -p "${MAGIC_DIR}"
        wget -qO "${MAGIC_PATH}" "$IMAGE_URL"

    - name: Update CustomPiOS Paths
      run: |
        cd repository/src
        ../../CustomPiOS/src/update-custompios-paths

    - name: Build Image
      run: |
        sudo modprobe loop
        cd repository/src
        # if BASE_ARCH is set, add it to config
        if [ -n "${BASE_ARCH}" ]; then
          echo "export BASE_ARCH=${BASE_ARCH}" >> config
        fi
        sudo bash -x ./build_dist "${VARIANT}"

    - name: Release Image
      env:
        BASE_RELEASE_COMPRESS: no
      run: |
        cd repository/src
        # CUSTOM_PI_OS_PATH is needed, its set in build_dist. Setting here manually
        export CUSTOM_PI_OS_PATH="$(realpath ../../CustomPiOS/src/)"
        source config
        sudo --preserve-env ../../CustomPiOS/src/release "${VARIANT}"

    - name: get sha or tag for release
      uses: tenhaus/get-release-or-tag@v2
      id: sha_or_tag

    - name: convert sha_or_tag to reasonable tag
      id: tag
      run: |
        export better_tag=$(echo ${{ steps.sha_or_tag.outputs.tag }} | sed -r 's/^(.{8}).{32}$/g-\1/')
        echo "tag=${better_tag}" >> $GITHUB_OUTPUT

    - name: Copy output and add timestamp
      id: copy
      run: |
        find -name "*.img*" || true
        CURRENT_IMAGE_NAME="$(basename $MAGIC_PATH)"
        echo "${CURRENT_IMAGE_NAME}"
        IMAGE="adsb-feeder-${IMG_NAME}-${{ steps.tag.outputs.tag }}.img"
        if [ "${VARIANT}" = "default" ]; then
          WORKSPACE="repository/src/workspace"
        else
          WORKSPACE="repository/src/workspace-${VARIANT}"
        fi
        sudo chmod 777 -R "$WORKSPACE"

        sudo chmod 777 .
        BUILT_IMAGE="$(find $WORKSPACE -name "*.img" | head -n 1)"
        mv -v "${BUILT_IMAGE}" "${IMAGE}"
        sudo chmod 777 "${IMAGE}"
        echo "image=${IMAGE}" >> $GITHUB_OUTPUT


    - name: Compress img to img.xz
      id: compress
      run: |
        export IMAGE="${{ steps.copy.outputs.image }}"
        sudo xz -z -3 -T0 -e "${IMAGE}"
        ls -l "${IMAGE}.xz"
        echo "image=${IMAGE}.xz" >> $GITHUB_OUTPUT

    # Upload to GitHub Releases
    - name: Upload to GitHub Releases
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
      run: |
        set -ex
        if ! command -v github-release &> /dev/null
        then
            # what system are we? darwin_amd64, linux_amd64, etc.
            SYSTEM=$(uname -s | tr '[:upper:]' '[:lower:]')
            ARCH=$(uname -m | sed 's/x86_64/amd64/g' | sed 's/aarch64/arm64/g')
            if [ "$SYSTEM" == "darwin" ]; then
                ARCH="amd64"
            fi
            wget -O- "https://github.com/c4milo/github-release/releases/download/v1.1.0/github-release_v1.1.0_${SYSTEM}_${ARCH}.tar.gz" | tar -xz -C /usr/local/bin
            chmod +x /usr/local/bin/github-release
        fi
        if [ ${{ github.ref }} = 'refs/heads/main' ];
        then
          PREFIX=""
        else
          PREFIX="${{ github.ref }}-"
        fi
        # assemble a release name
        RELEASE_NAME=${PREFIX}adsb-feeder-${{ steps.tag.outputs.tag }}
        github-release ${{ github.repository }} \
          $RELEASE_NAME \
          main \
          "CI/CD builds for $RELEASE_NAME" \
          "*img.xz"
